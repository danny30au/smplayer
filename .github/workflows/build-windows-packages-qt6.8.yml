name: Build Windows Packages with Qt 6.8

on:
  workflow_dispatch:
  #release:
  #  types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { arch: 'x64', 'portable': false }
          - { arch: 'x64', 'portable': true }

    runs-on: windows-latest
    env:
      PORTABLE: ${{ matrix.config.portable }}

    steps:
      - name: Checkout build scripts
        run: git clone https://github.com/smplayer-dev/smplayer-build.git .

      - name: Explore repository structure
        run: |
          Write-Host "Current directory structure:"
          Get-ChildItem -Recurse -Depth 2 | Format-Table Name, FullName
          
          Write-Host "Looking for NSIS scripts:"
          Get-ChildItem -Recurse -Filter "*.nsi" -ErrorAction SilentlyContinue | Format-Table FullName
          
          Write-Host "Looking for BUILD directory:"
          Get-ChildItem -Recurse -Filter "BUILD" -Directory -ErrorAction SilentlyContinue | Format-Table FullName

      - name: Install sources (normal)
        if: ${{ matrix.config.portable == false }}
        uses: actions/checkout@v4
        with:
          repository: smplayer-dev/smplayer
          path: packages/smplayer
          ref: qt6
          fetch-depth: 0

      - name: Install sources (portable)
        if: ${{ matrix.config.portable == true }}
        uses: actions/checkout@v4
        with:
          repository: smplayer-dev/smplayer
          path: packages/smplayer-portable
          ref: qt6
          fetch-depth: 0

      - name: Install themes
        run: |
          git clone --depth 1 https://github.com/smplayer-dev/smplayer-themes.git packages\smplayer-themes
          git clone --depth 1 https://github.com/smplayer-dev/smplayer-skins.git packages\smplayer-skins

      - name: Install mplayer and mpv
        run: .\uncompress_players.cmd

      - name: Install Qt (64 bit)
        if: ${{ matrix.config.arch == 'x64' }}
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '6.10.*'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw'
          modules: 'qt5compat'
          tools: 'tools_mingw1310'

      - name: Set mingw32 path (64 bit)
        if: ${{ matrix.config.arch == 'x64' }}
        run: echo "$env:IQTA_TOOLS\mingw1310_64\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Find and fix NSIS script for Qt6
        if: ${{ matrix.config.portable == false }}
        run: |
          # Search for NSIS script in common locations
          $possiblePaths = @(
            "packages\BUILD\smplayer.nsi",
            "BUILD\smplayer.nsi", 
            "smplayer.nsi",
            "packages\smplayer\smplayer.nsi",
            "packages\smplayer-build\smplayer.nsi",
            ".\smplayer.nsi"
          )
          
          $nsisScript = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $nsisScript = $path
              Write-Host "Found NSIS script at: $nsisScript"
              break
            }
          }
          
          if (-not $nsisScript) {
            # Try to find any .nsi file
            $foundScripts = Get-ChildItem -Recurse -Filter "*.nsi" -ErrorAction SilentlyContinue
            if ($foundScripts) {
              $nsisScript = $foundScripts[0].FullName
              Write-Host "Found NSIS script at: $nsisScript"
            } else {
              Write-Error "No NSIS script found in the repository!"
              exit 1
            }
          }
          
          # Store the path for later steps
          echo "NSIS_SCRIPT_PATH=$nsisScript" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Now fix the Qt5 to Qt6 references
          Write-Host "Updating NSIS script at: $nsisScript"
          $content = Get-Content $nsisScript -Raw
          
          # Replace Qt5 references with Qt6
          $replacements = @{
            'Qt5Core\.dll' = 'Qt6Core.dll'
            'Qt5Gui\.dll' = 'Qt6Gui.dll'
            'Qt5Widgets\.dll' = 'Qt6Widgets.dll'
            'Qt5Network\.dll' = 'Qt6Network.dll'
            'libqt5' = 'libqt6'
            'qt5' = 'qt6'
          }
          
          foreach ($pattern in $replacements.Keys) {
            $content = $content -replace $pattern, $replacements[$pattern]
          }
          
          # Update GetDLLVersionLocal calls
          $content = $content -replace 'GetDLLVersionLocal\s+"[^"]*Qt5Core\.dll"', 'GetDLLVersionLocal "Qt6Core.dll"'
          
          $content | Set-Content $nsisScript -Encoding UTF8
          Write-Host "Successfully updated NSIS script for Qt6"

      - name: Copy Qt6 DLLs for NSIS
        if: ${{ matrix.config.portable == false }}
        run: |
          $qtBinPath = "$env:IQTA_TOOLS\mingw1310_64\bin"
          $targetDir = "."
          
          # Try to determine the correct target directory based on NSIS script location
          if ($env:NSIS_SCRIPT_PATH) {
            $scriptDir = [System.IO.Path]::GetDirectoryName($env:NSIS_SCRIPT_PATH)
            if (Test-Path $scriptDir) {
              $targetDir = $scriptDir
            }
          }
          
          Write-Host "Copying Qt6 DLLs to: $targetDir"
          
          if (Test-Path $qtBinPath) {
            $qtDlls = @(
              "Qt6Core.dll",
              "Qt6Gui.dll", 
              "Qt6Widgets.dll",
              "Qt6Network.dll"
            )
            
            foreach ($dll in $qtDlls) {
              $source = Join-Path $qtBinPath $dll
              if (Test-Path $source) {
                Copy-Item $source $targetDir -ErrorAction SilentlyContinue
                Write-Host "Copied $dll to $targetDir"
              } else {
                Write-Warning "Qt6 DLL not found: $source"
              }
            }
          }

      - name: Compile themes
        run: .\compile_themes.cmd

      - name: Compile smplayer
        run: |
          if ($env:PORTABLE -eq 'true') {
            .\compile_smplayer.cmd pe
          } else {
            .\compile_smplayer.cmd
          }

      - name: Install
        run: |
          if ($env:PORTABLE -eq 'true') {
            .\install.cmd pe
          } else {
            .\install.cmd
          }

      - name: Create installer with dynamic path handling
        if: ${{ matrix.config.portable == false }}
        run: |
          # First, let's check what files were created
          Write-Host "Files in current directory before NSIS:"
          Get-ChildItem | Format-Table Name
          
          Write-Host "Checking for Qt6Core.dll:"
          if (Test-Path "Qt6Core.dll") {
            Write-Host "Qt6Core.dll found in current directory"
          } else {
            # Try to copy it again
            $qtBinPath = "$env:IQTA_TOOLS\mingw1310_64\bin"
            if (Test-Path "$qtBinPath\Qt6Core.dll") {
              Copy-Item "$qtBinPath\Qt6Core.dll" ".\" -ErrorAction SilentlyContinue
              Write-Host "Copied Qt6Core.dll to current directory"
            }
          }
          
          .\nsis.cmd
          
          # Look for the installer filename in common locations
          $possibleFiles = @(
            "packages\BUILD\installer_filename.txt",
            "BUILD\installer_filename.txt",
            "installer_filename.txt"
          )
          
          $filenameFile = $null
          foreach ($file in $possibleFiles) {
            if (Test-Path $file) {
              $filenameFile = $file
              break
            }
          }
          
          if ($filenameFile) {
            $filename = Get-Content $filenameFile -TotalCount 1
            echo "PACKAGEFILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "ORIGINAL_FILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Host "Found installer filename: $filename"
          } else {
            Write-Error "Could not find installer_filename.txt"
            # Try to find the executable directly
            $exeFiles = Get-ChildItem -Recurse -Filter "smplayer*.exe" -ErrorAction SilentlyContinue
            if ($exeFiles) {
              $filename = $exeFiles[0].Name
              echo "PACKAGEFILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              echo "ORIGINAL_FILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              Write-Host "Using found EXE file: $filename"
            }
          }

      - name: Create 7z package
        if: ${{ matrix.config.portable == true }}
        run: |
          .\create_portable_package.cmd
          
          # Look for portable filename in common locations
          $possibleFiles = @(
            "packages\BUILD\portable_filename.txt", 
            "BUILD\portable_filename.txt",
            "portable_filename.txt"
          )
          
          $filenameFile = $null
          foreach ($file in $possibleFiles) {
            if (Test-Path $file) {
              $filenameFile = $file
              break
            }
          }
          
          if ($filenameFile) {
            $filename = Get-Content $filenameFile -TotalCount 1
            echo "PACKAGEFILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "ORIGINAL_FILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Error "Could not find portable_filename.txt"
          }

      - name: Rename package for Qt6
        shell: pwsh
        run: |
          $originalFile = "${{ env.ORIGINAL_FILENAME }}"
          if ([string]::IsNullOrEmpty($originalFile)) {
            Write-Error "ORIGINAL_FILENAME is empty!"
            exit 1
          }
          
          $extension = [System.IO.Path]::GetExtension($originalFile)
          $filenameWithoutExt = [System.IO.Path]::GetFileNameWithoutExtension($originalFile)
          $baseName = $filenameWithoutExt -replace '-qt6$', ''
          $newFilename = "$baseName-qt6$extension"
          
          Write-Host "Renaming $originalFile to $newFilename"
          
          # Search for the file in common output directories
          $possibleDirs = @(
            "packages/BUILD/output",
            "BUILD/output", 
            "output",
            "."
          )
          
          $found = $false
          foreach ($dir in $possibleDirs) {
            if (Test-Path "$dir/$originalFile") {
              Rename-Item -Path "$dir/$originalFile" -NewName $newFilename
              echo "PACKAGEFILENAME=$newFilename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              Write-Host "Successfully renamed to $newFilename in $dir"
              $found = $true
              break
            }
          }
          
          if (-not $found) {
            Write-Error "File $originalFile not found in any common output directories!"
            Write-Host "Searching for any package files:"
            Get-ChildItem -Recurse -Filter "smplayer*" -ErrorAction SilentlyContinue | Format-Table FullName
            exit 1
          }

      - name: Create artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGEFILENAME }}
          path: packages/BUILD/output/${{ env.PACKAGEFILENAME }}

      - name: Upload package to release
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/BUILD/output/${{ env.PACKAGEFILENAME }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

name: Build Windows Packages with Qt 6.8

on:
  workflow_dispatch:
  #release:
  #  types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { arch: 'x64', 'portable': false }
          - { arch: 'x64', 'portable': true }

    runs-on: windows-2022
    env:
      PORTABLE: ${{ matrix.config.portable }}

    steps:
      - name: Checkout build scripts
        run: git clone https://github.com/smplayer-dev/smplayer-build.git .

      - name: Install sources (normal)
        if: ${{ matrix.config.portable == false }}
        uses: actions/checkout@v4
        with:
          repository: smplayer-dev/smplayer
          path: packages/smplayer
          ref: qt6
          fetch-depth: 0

      - name: Install sources (portable)
        if: ${{ matrix.config.portable == true }}
        uses: actions/checkout@v4
        with:
          repository: smplayer-dev/smplayer
          path: packages/smplayer-portable
          ref: qt6
          fetch-depth: 0

      - name: Install themes
        run: |
          git clone --depth 1 https://github.com/smplayer-dev/smplayer-themes.git packages\smplayer-themes
          git clone --depth 1 https://github.com/smplayer-dev/smplayer-skins.git packages\smplayer-skins

      - name: Install mplayer and mpv
        run: .\uncompress_players.cmd

      - name: Install Qt (64 bit)
        if: ${{ matrix.config.arch == 'x64' }}
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '6.8.3'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw'
          modules: 'qt5compat'
          tools: 'tools_mingw1310'

      - name: Set mingw32 path (64 bit)
        if: ${{ matrix.config.arch == 'x64' }}
        run: echo "$env:IQTA_TOOLS\mingw1310_64\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Fix NSIS script for Qt6
        if: ${{ matrix.config.portable == false }}
        run: |
          # Update NSIS script to work with Qt6
          $nsisScript = "packages\BUILD\smplayer.nsi"
          if (Test-Path $nsisScript) {
            $content = Get-Content $nsisScript -Raw
            # Replace Qt5Core.dll with Qt6Core.dll
            $content = $content -replace 'Qt5Core\.dll', 'Qt6Core.dll'
            # Also update other potential Qt5 references
            $content = $content -replace 'Qt5Gui\.dll', 'Qt6Gui.dll'
            $content = $content -replace 'Qt5Widgets\.dll', 'Qt6Widgets.dll'
            $content = $content -replace 'Qt5Network\.dll', 'Qt6Network.dll'
            # Update any version detection logic if needed
            $content | Set-Content $nsisScript -Encoding UTF8
            Write-Host "Updated NSIS script for Qt6"
          } else {
            Write-Warning "NSIS script not found at $nsisScript"
          }

      - name: Compile themes
        run: .\compile_themes.cmd

      - name: Compile smplayer
        run: |
          if ($env:PORTABLE -eq 'true') {
            .\compile_smplayer.cmd pe
          } else {
            .\compile_smplayer.cmd
          }

      - name: Install
        run: |
          if ($env:PORTABLE -eq 'true') {
            .\install.cmd pe
          } else {
            .\install.cmd
          }

      - name: Verify Qt6 DLLs exist
        if: ${{ matrix.config.portable == false }}
        run: |
          Write-Host "Checking for Qt6 DLLs in smplayer-build directory:"
          if (Test-Path "smplayer-build") {
            Get-ChildItem "smplayer-build\Qt6*.dll" | ForEach-Object { Write-Host "Found: $($_.Name)" }
          } else {
            Write-Host "smplayer-build directory not found"
          }

      - name: Create installer
        if: ${{ matrix.config.portable == false }}
        run: |
          # Ensure Qt6 DLLs are available for NSIS
          $qtBinPath = "$env:IQTA_TOOLS\mingw1310_64\bin"
          if (Test-Path $qtBinPath) {
            Copy-Item "$qtBinPath\Qt6Core.dll" "smplayer-build\" -ErrorAction SilentlyContinue
            Copy-Item "$qtBinPath\Qt6Gui.dll" "smplayer-build\" -ErrorAction SilentlyContinue
            Copy-Item "$qtBinPath\Qt6Widgets.dll" "smplayer-build\" -ErrorAction SilentlyContinue
            Copy-Item "$qtBinPath\Qt6Network.dll" "smplayer-build\" -ErrorAction SilentlyContinue
          }
          .\nsis.cmd
          $filename = Get-Content packages\BUILD\installer_filename.txt -TotalCount 1
          echo "PACKAGEFILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ORIGINAL_FILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create 7z package
        if: ${{ matrix.config.portable == true }}
        run: |
          .\create_portable_package.cmd
          $filename = Get-Content packages\BUILD\portable_filename.txt -TotalCount 1
          echo "PACKAGEFILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ORIGINAL_FILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Rename package for Qt6
        shell: pwsh
        run: |
          $originalFile = "${{ env.ORIGINAL_FILENAME }}"
          if ([string]::IsNullOrEmpty($originalFile)) {
            Write-Error "ORIGINAL_FILENAME is empty!"
            exit 1
          }
          
          $extension = [System.IO.Path]::GetExtension($originalFile)
          $filenameWithoutExt = [System.IO.Path]::GetFileNameWithoutExtension($originalFile)
          
          # Remove any existing -qt6 suffix to avoid duplicates
          $baseName = $filenameWithoutExt -replace '-qt6$', ''
          $newFilename = "$baseName-qt6$extension"
          
          Write-Host "Renaming $originalFile to $newFilename"
          
          $outputDir = "packages/BUILD/output"
          if (Test-Path "$outputDir/$originalFile") {
            Rename-Item -Path "$outputDir/$originalFile" -NewName $newFilename
            echo "PACKAGEFILENAME=$newFilename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Host "Successfully renamed to $newFilename"
          } else {
            Write-Error "File $outputDir/$originalFile not found!"
            Write-Host "Available files in $outputDir :"
            Get-ChildItem -Path $outputDir | ForEach-Object { Write-Host "  $($_.Name)" }
            exit 1
          }

      - name: Debug - List final artifacts
        run: |
          Write-Host "Final artifacts in packages/BUILD/output:"
          Get-ChildItem -Path "packages/BUILD/output" -Recurse | ForEach-Object { 
            Write-Host "  $($_.Name) - $($_.Length) bytes"
          }

      - name: Create artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGEFILENAME }}
          path: packages/BUILD/output/${{ env.PACKAGEFILENAME }}

      - name: Upload package to release
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/BUILD/output/${{ env.PACKAGEFILENAME }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

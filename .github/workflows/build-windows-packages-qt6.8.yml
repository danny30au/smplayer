name: Build Windows Packages with Qt 6.8

on:
  workflow_dispatch:
  #release:
  #  types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { arch: 'x64', 'portable': false }
          - { arch: 'x64', 'portable': true }

    runs-on: windows-2022
    env:
      PORTABLE: ${{ matrix.config.portable }}

    steps:
      - name: Checkout build scripts
        run: git clone https://github.com/smplayer-dev/smplayer-build.git .

      - name: Install sources (normal)
        if: ${{ matrix.config.portable == false }}
        uses: actions/checkout@v4
        with:
          repository: smplayer-dev/smplayer
          path: packages/smplayer
          ref: qt6
          fetch-depth: 0

      - name: Install sources (portable)
        if: ${{ matrix.config.portable == true }}
        uses: actions/checkout@v4
        with:
          repository: smplayer-dev/smplayer
          path: packages/smplayer-portable
          ref: qt6
          fetch-depth: 0

      - name: Install themes
        run: |
          git clone --depth 1 https://github.com/smplayer-dev/smplayer-themes.git packages\smplayer-themes
          git clone --depth 1 https://github.com/smplayer-dev/smplayer-skins.git packages\smplayer-skins

      - name: Install mplayer and mpv
        run: .\uncompress_players.cmd

      - name: Install Qt (64 bit)
        if: ${{ matrix.config.arch == 'x64' }}
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '6.8.3'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw'
          modules: 'qt5compat'
          tools: 'tools_mingw1310'

      - name: Set mingw32 path (64 bit)
        if: ${{ matrix.config.arch == 'x64' }}
        run: echo "$env:IQTA_TOOLS\mingw1310_64\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Comprehensive NSIS script fix for Qt6
        if: ${{ matrix.config.portable == false }}
        run: |
          $nsisScript = "packages\BUILD\smplayer.nsi"
          if (Test-Path $nsisScript) {
            # Read the entire script
            $content = Get-Content $nsisScript -Raw
            
            # First, let's check what's around line 1194
            $lines = $content -split "`n"
            $startLine = [Math]::Max(1185, 0)
            $endLine = [Math]::Min(1205, $lines.Length - 1)
            Write-Host "Content around line 1194:"
            for ($i = $startLine; $i -le $endLine; $i++) {
              Write-Host "$($i+1): $($lines[$i])"
            }
            
            # Common Qt5 to Qt6 replacements
            $replacements = @{
              'Qt5Core\.dll' = 'Qt6Core.dll'
              'Qt5Gui\.dll' = 'Qt6Gui.dll'
              'Qt5Widgets\.dll' = 'Qt6Widgets.dll'
              'Qt5Network\.dll' = 'Qt6Network.dll'
              'Qt5Multimedia\.dll' = 'Qt6Multimedia.dll'
              'Qt5MultimediaWidgets\.dll' = 'Qt6MultimediaWidgets.dll'
              'libqt5' = 'libqt6'
              'qt5' = 'qt6'
            }
            
            # Apply replacements
            foreach ($pattern in $replacements.Keys) {
              $content = $content -replace $pattern, $replacements[$pattern]
            }
            
            # Additional fix for GetDLLVersionLocal calls
            # If the specific line 1194 is failing, we might need to handle it specially
            $content = $content -replace 'GetDLLVersionLocal\s+"[^"]*Qt5Core\.dll"', 'GetDLLVersionLocal "Qt6Core.dll"'
            
            # Write the updated content back
            $content | Set-Content $nsisScript -Encoding UTF8
            Write-Host "Updated NSIS script for Qt6 compatibility"
            
            # Show the updated lines around 1194
            $updatedLines = $content -split "`n"
            Write-Host "Updated content around line 1194:"
            for ($i = $startLine; $i -le $endLine; $i++) {
              Write-Host "$($i+1): $($updatedLines[$i])"
            }
          } else {
            Write-Error "NSIS script not found at $nsisScript"
          }

      - name: Copy Qt6 DLLs for NSIS
        if: ${{ matrix.config.portable == false }}
        run: |
          $qtBinPath = "$env:IQTA_TOOLS\mingw1310_64\bin"
          $targetDir = "smplayer-build"
          
          if (Test-Path $qtBinPath) {
            # Create target directory if it doesn't exist
            if (!(Test-Path $targetDir)) {
              New-Item -ItemType Directory -Path $targetDir -Force
            }
            
            # Copy essential Qt6 DLLs
            $qtDlls = @(
              "Qt6Core.dll",
              "Qt6Gui.dll", 
              "Qt6Widgets.dll",
              "Qt6Network.dll",
              "Qt6Multimedia.dll",
              "Qt6MultimediaWidgets.dll"
            )
            
            foreach ($dll in $qtDlls) {
              $source = Join-Path $qtBinPath $dll
              if (Test-Path $source) {
                Copy-Item $source $targetDir -ErrorAction SilentlyContinue
                Write-Host "Copied $dll"
              } else {
                Write-Warning "Qt6 DLL not found: $source"
              }
            }
            
            # Also copy any required Qt6 plugins
            $pluginsSource = "$env:IQTA_TOOLS\mingw1310_64\plugins"
            $pluginsTarget = "smplayer-build\plugins"
            if (Test-Path $pluginsSource) {
              if (!(Test-Path $pluginsTarget)) {
                New-Item -ItemType Directory -Path $pluginsTarget -Force
              }
              Copy-Item "$pluginsSource\*" $pluginsTarget -Recurse -Force
              Write-Host "Copied Qt6 plugins"
            }
          } else {
            Write-Warning "Qt bin path not found: $qtBinPath"
          }

      - name: Verify DLLs for NSIS
        if: ${{ matrix.config.portable == false }}
        run: |
          Write-Host "Checking DLLs in smplayer-build directory:"
          if (Test-Path "smplayer-build") {
            Get-ChildItem "smplayer-build\*.dll" | ForEach-Object { 
              Write-Host "  $($_.Name) - $([math]::Round($_.Length/1KB, 2)) KB" 
            }
          }

      - name: Compile themes
        run: .\compile_themes.cmd

      - name: Compile smplayer
        run: |
          if ($env:PORTABLE -eq 'true') {
            .\compile_smplayer.cmd pe
          } else {
            .\compile_smplayer.cmd
          }

      - name: Install
        run: |
          if ($env:PORTABLE -eq 'true') {
            .\install.cmd pe
          } else {
            .\install.cmd
          }

      - name: Create installer
        if: ${{ matrix.config.portable == false }}
        run: |
          .\nsis.cmd
          $filename = Get-Content packages\BUILD\installer_filename.txt -TotalCount 1
          echo "PACKAGEFILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ORIGINAL_FILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create 7z package
        if: ${{ matrix.config.portable == true }}
        run: |
          .\create_portable_package.cmd
          $filename = Get-Content packages\BUILD\portable_filename.txt -TotalCount 1
          echo "PACKAGEFILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ORIGINAL_FILENAME=$filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Rename package for Qt6
        shell: pwsh
        run: |
          $originalFile = "${{ env.ORIGINAL_FILENAME }}"
          if ([string]::IsNullOrEmpty($originalFile)) {
            Write-Error "ORIGINAL_FILENAME is empty!"
            exit 1
          }
          
          $extension = [System.IO.Path]::GetExtension($originalFile)
          $filenameWithoutExt = [System.IO.Path]::GetFileNameWithoutExtension($originalFile)
          
          # Remove any existing -qt6 suffix to avoid duplicates
          $baseName = $filenameWithoutExt -replace '-qt6$', ''
          $newFilename = "$baseName-qt6$extension"
          
          Write-Host "Renaming $originalFile to $newFilename"
          
          $outputDir = "packages/BUILD/output"
          if (Test-Path "$outputDir/$originalFile") {
            Rename-Item -Path "$outputDir/$originalFile" -NewName $newFilename
            echo "PACKAGEFILENAME=$newFilename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Host "Successfully renamed to $newFilename"
          } else {
            Write-Error "File $outputDir/$originalFile not found!"
            Write-Host "Available files in $outputDir :"
            Get-ChildItem -Path $outputDir | ForEach-Object { Write-Host "  $($_.Name)" }
            exit 1
          }

      - name: Create artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGEFILENAME }}
          path: packages/BUILD/output/${{ env.PACKAGEFILENAME }}

      - name: Upload package to release
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/BUILD/output/${{ env.PACKAGEFILENAME }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
